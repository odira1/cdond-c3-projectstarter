version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        default: ""
        type: string
        description: The unique ID of the workflow to identify the environment stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Add code to destroy the cloudformation stacks based on the provided workflow-id
            # For example, you can use AWS CLI to delete stacks:
            aws cloudformation delete-stack --stack-name <<parameters.workflow-id>>
            # Handle errors and exit code if needed
            exit 1

jobs:
  build-frontend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [frontend-build]
      - run:
          name: Build front-end
          command: |
            cd frontend
            npm install
            npm run build
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-build

  build-backend:
    docker:
      - image: circleci/node:13.8.0
    steps:
      - checkout
      - restore_cache:
          keys: [backend-build]
      - run:
          name: Back-end build
          command: |
            cd backend
            npm install
            npm run build
      - save_cache:
          paths: [backend/node_modules]
          key: backend-build

  test-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    # working_directory: ~/project/frontend
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-test]
      # Your job code here
      # Install Node.js packages
      - run: |
          cd frontend
          npm install
          npm run test
      # Save dependencies to cache
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-test

  test-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-test]
      # Your job code here
      # Install Node.js packages
      - run: |
          cd backend
          npm install
          npm run test
      # Save dependencies to cache
      - save_cache:
          paths: [backend/node_modules]
          key: backend-test

  scan-frontend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [frontend-scan]
      # Your job code here
      - run: |
          cd frontend
          npm install
          ## npm install oauth-sign@^0.9.0
          npm audit fix --audit-level=critical --force
          ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
          npm audit fix --force
          npm audit --audit-level=critical
      # Save dependencies to cache
      - save_cache:
          paths: [frontend/node_modules]
          key: frontend-scan
      - slack/notify:
          channel: C05TPQKC9NW
          event: fail
          template: basic_fail_1
          debug: true

  scan-backend:
    docker:
      # Docker image here
      - image: circleci/node:13.8.0
    steps:
      # Checkout code from git
      - checkout
      # Restore from cache
      - restore_cache:
          keys: [backend-scan]
      # Your job code here
      - run: |
          cd backend
          npm install
          ## npm install oauth-sign@^0.9.0
          npm audit fix --audit-level=critical --force
          ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
          npm audit fix --force
          npm audit --audit-level=critical
      # Save dependencies to cache
      - save_cache:
          paths: [backend/node_modules]
          key: backend-scan

  deploy-infrastructure:
    docker:
      - image: amazon/aws-cli
    steps:
      - checkout
      - run:
          name: Install tar and gzip
          command: |
            # Update package list and install tar and gzip
            apk update
            apk add tar gzip
      - run:
          name: Deploy Infrastructure
          command: |
            aws cloudformation deploy \
            --template-file .circleci/files/backend.yml \
            --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
            --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
            --tags project=udapeople
      - destroy-environment:
          workflow-id: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"

workflows:
  default:
    jobs:
      - build-frontend
      - build-backend
      - test-frontend:
          requires: [build-frontend]
      - test-backend:
          requires: [build-backend]
      - scan-frontend:
          requires: [build-frontend]
          context: Slack
      - scan-backend:
          requires: [build-backend]
      - deploy-infrastructure:
          requires: [test-frontend, test-backend, scan-frontend, scan-backend]
          filters:
            branches:
              only: [feature/CDOND-C3/update-ci-config, master]
