version: 2.1

orbs:
  slack: circleci/slack@4.12.5

commands:
  destroy-environment:
    description: Destroy back-end and front-end cloudformation stacks given a workflow ID.
    parameters:
      workflow-id:
        default: ""
        type: string
        description: The unique ID of the workflow to identify the environment stacks.
    steps:
      - run:
          name: Destroy environments
          when: on_fail
          command: |
            # Add code to destroy the cloudformation stacks based on the provided workflow-id
            # For example, you can use AWS CLI to delete stacks:
            aws cloudformation delete-stack --stack-name <<parameters.workflow-id>>
            # Handle errors and exit code if needed
            exit 1

jobs:
  # build-frontend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [frontend-build]
  #     - run:
  #         name: Build front-end
  #         command: |
  #           cd frontend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-build

  # build-backend:
  #   docker:
  #     - image: circleci/node:13.8.0
  #   steps:
  #     - checkout
  #     - restore_cache:
  #         keys: [backend-build]
  #     - run:
  #         name: Back-end build
  #         command: |
  #           cd backend
  #           npm install
  #           npm run build
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-build

  # test-frontend:
  #   docker:
  #     # Docker image here
  #     - image: circleci/node:13.8.0
  #   # working_directory: ~/project/frontend
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Restore from cache
  #     - restore_cache:
  #         keys: [frontend-test]
  #     # Your job code here
  #     # Install Node.js packages
  #     - run: |
  #         cd frontend
  #         npm install
  #         npm run test
  #     # Save dependencies to cache
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-test

  # test-backend:
  #   docker:
  #     # Docker image here
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Restore from cache
  #     - restore_cache:
  #         keys: [backend-test]
  #     # Your job code here
  #     # Install Node.js packages
  #     - run: |
  #         cd backend
  #         npm install
  #         npm run test
  #     # Save dependencies to cache
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-test

  # scan-frontend:
  #   docker:
  #     # Docker image here
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Restore from cache
  #     - restore_cache:
  #         keys: [frontend-scan]
  #     # Your job code here
  #     - run: |
  #         cd frontend
  #         npm install
  #         ## npm install oauth-sign@^0.9.0
  #         npm audit fix --audit-level=critical --force
  #         ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
  #         npm audit fix --force
  #         npm audit --audit-level=critical
  #     # Save dependencies to cache
  #     - save_cache:
  #         paths: [frontend/node_modules]
  #         key: frontend-scan
  #     - slack/notify:
  #         channel: C05TPQKC9NW
  #         event: fail
  #         template: basic_fail_1
  #         debug: true

  # scan-backend:
  #   docker:
  #     # Docker image here
  #     - image: circleci/node:13.8.0
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Restore from cache
  #     - restore_cache:
  #         keys: [backend-scan]
  #     # Your job code here
  #     - run: |
  #         cd backend
  #         npm install
  #         ## npm install oauth-sign@^0.9.0
  #         npm audit fix --audit-level=critical --force
  #         ## If the "npm audit fix" command above could not fix all critical vulnerabilities, try “npm audit fix --force” again
  #         npm audit fix --force
  #         npm audit --audit-level=critical
  #     # Save dependencies to cache
  #     - save_cache:
  #         paths: [backend/node_modules]
  #         key: backend-scan

  # configure-infrastructure:
  #   docker:
  #     # Docker image here that supports Ansible
  #     - image: python:3.7-alpine3.11
  #   steps:
  #     # Checkout code from git
  #     - checkout
  #     # Add ssh keys with fingerprint
  #     - add_ssh_keys:
  #         fingerprints:
  #           - "08:07:23:c6:40:13:5b:07:30:db:e4:28:fa:80:2d:e2"
  #     # attach workspace
  #     - run:
  #         name: Install dependencies
  #         command: |
  #           apk add --update ansible
  #           pip install --upgrade pip
  #           pip install awscli
  #     - run:
  #         name: Configure server
  #         command: |
  #           cd .circleci/ansible
  #           ansible-playbook -i inventory.txt configure-server.yml

  # deploy-infrastructure:
  #   docker:
  #     - image: amazon/aws-cli
  #   steps:
  #     - checkout
  #     - run:
  #         name: Install tar and gzip
  #         command: |
  #           # Update package list and install tar and gzip
  #           yum update -y
  #           yum install -y tar gzip
  #     - run:
  #         name: Ensure backend exists
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/backend.yml \
  #           --stack-name "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #           --tags project=udapeople
  #     - destroy-environment:
  #         workflow-id: "udapeople-backend-${CIRCLE_WORKFLOW_ID:0:7}"
  #     - run:
  #         name: Ensure Frontend exists
  #         command: |
  #           aws cloudformation deploy \
  #           --template-file .circleci/files/frontend.yml \
  #           --stack-name "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}" \
  #           --parameter-overrides ID="${CIRCLE_WORKFLOW_ID:0:7}"  \
  #           --tags project=udapeople
  #     - destroy-environment:
  #         workflow-id: "udapeople-frontend-${CIRCLE_WORKFLOW_ID:0:7}"
  #     - slack/notify:
  #         channel: C05TPQKC9NW
  #         event: fail
  #         template: basic_fail_1

  run-migrations:
    docker:
      # Docker image here that supports NodeJS
      - image: cimg/node:14.21.3
    steps:
      # Checkout code from git
      - checkout
      - run:
          name: Run migrations
          command: |
            cd backend
            npm install
            ## Run and save the migration output
            npm run migrations > migrations_dump.txt
      - run:
          name: Send migration results to memstash
          command: |
            if grep -q "has been executed successfully." ~/project/backend/migrations_dump.txt
              then
              # If you are using kvdb.io, generate the bucket ID "9GE4jRtKznmVKRfvdBABBe" in your local terminal first
              curl https://kvdb.io/Rr9w4xHEBnyxqKqpAJGQmJ/migration_${CIRCLE_WORKFLOW_ID:0:7}  -d '1'
              fi
        # Here's where you will add some code to rollback on failure

  deploy-frontend:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
            export API_URL="http://${BACKEND_IP}:3030"
            echo "${API_URL}"
      - run:
          name: Deploy frontend objects
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  deploy-backend:
    docker:
      # Docker image here that supports Ansible
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      # Add ssh keys with fingerprint
      # attach workspace
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Deploy backend
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure
  smoke-test:
    docker:
      # Lightweight Docker image
      - image: alpine:latest
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Get backend url
          command: |
            # your code here
      - run:
          name: Backend smoke test.
          command: |
            # your code here
      - run:
          name: Frontend smoke test.
          command: |
            # your code here
    # Here's where you will add some code to rollback on failure

  cloudfront-update:
    docker:
      # Docker image here that supports AWS CLI
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Install dependencies
          command: |
            # your code here
      - run:
          name: Update cloudfront distribution
          command: |
            # your code here
      # Here's where you will add some code to rollback on failure

  cleanup:
    docker:
      # Docker image here
      - image: amazon/aws-cli
    steps:
      # Checkout code from git
      - run:
          name: Get old stack workflow id
          command: |
            # your code here
            export OldWorkflowID="the id here"
            export STACKS=[] #put the list of stacks here
      - run:
          name: Remove old stacks and files
          command: |
            if [[ "${STACKS[@]}" =~ "${OldWorkflowID}" ]]
            then
              # your code here
            fi

workflows:
  default:
    jobs:
      # - build-frontend
      # - build-backend
      # - test-frontend:
      #     requires: [build-frontend]
      # - test-backend:
      #     requires: [build-backend]
      # - scan-frontend:
      #     requires: [build-frontend]
      #     context: Slack
      # - scan-backend:
      #     requires: [build-backend]
      # - deploy-infrastructure:
      #     requires: [test-frontend, test-backend, scan-frontend, scan-backend]
      # - configure-infrastructure:
      #     requires: [deploy-infrastructure]
      #     filters:
      #       branches:
      #         only: [feature/CDOND-C3/update-ci-config]
      - run-migrations
        # requires: [configure-infrastructure]
      - deploy-frontend:
          requires: [run-migrations]
      - deploy-backend:
          requires: [run-migrations]
      - smoke-test
        # requires: [deploy-backend, deploy-frontend]
      - cloudfront-update:
          requires: [smoke-test]
      - cleanup:
          requires: [cloudfront-update]
